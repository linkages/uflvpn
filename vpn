#!/bin/bash
# requires: tmux openconnect systemd(resolvectl) iproute2(ip) coreutils(dirname) sed awk

# load up the yaml parser
source ./lib/parse_yaml
source ./lib/functions

if [ $# -lt 1 ]; then
    echo "Usage: $0 <config file>"
    exit 1
fi

if [ -f ./${1} ]; then
    eval $(parse_yaml ./${1})
else
    echo "Could not find config file: ${1}"
    exit 2
fi

check_args

NETWORKS=""
for network in ${networks_}; do
    NETWORKS=$(echo ${NETWORKS} $(eval echo \${${network}}))
done

DNS_SERVERS=""
if [ check_dns ]; then
    for dns_server in ${dns_servers_}; do
	DNS_SERVERS=$(echo ${DNS_SERVERS} $(eval echo \${${dns_server}}))
    done
fi

DOMAINS=""
if [ check_domains ]; then
    for domain in ${domains_}; do
	DOMAINS=$(echo ${DOMAINS} $(eval echo \${domain}))
    done
fi

MYGATEWAY=$(ip route list | grep default | awk '{print $3}')
WINDOWNAME=${tun_ifac//./-}

RUN_USER=${USER}
SOK_NAME=${user}.${host}
STY_NAME=${PPID}.${SOK_NAME}
LOGPATH=$(dirname ${log})

if [ ! -d ${LOGPATH} ]; then
    mkdir -p ${LOGPATH}
fi

function log
{
    echo ${1} >> ${log}
}

function add_dns
{
    resolvectl dns ${tun_ifac} ${DNS_SERVERS}
    resolvectl domain ${tun_ifac} ${DOMAINS}
}

function remove_dns
{
    resolvectl dns ${tun_ifac} ""
    resolvectl domain ${tun_ifac} ""
}

# connects to VPN, does not return. 
function vpn_connect
{
    exec openconnect \
	 --interface=${tun_ifac} \
	 --setuid=${RUN_USER} \
	 --user="${user}@ufl.edu/${tunnelname}" \
	 --script=${0} \
	 --servercert pin-sha256:dO1S5TNJhgxnwtSChcjknSA1EVmnj/3kVrBgFEGWi1Y= \
	 ${host}
}

# adds routes, called indirectly from openconnect --script
function add_routes
{
    log "Adding requested routes";
    for net in ${NETWORKS}; do
	log "ip route add ${net} dev ${tun_ifac} scope link"
	ip route add ${net} dev ${tun_ifac} scope link
    done

    MYIP=$(ip addr list ${nic} | grep -w inet | awk '{print $2}' | awk -F / '{print $1}')
    log "Adding route to ${VPNGATEWAY} via ${MYIP}"
    log "ip route add ${VPNGATEWAY} via ${MYGATEWAY} dev ${nic} source ${MYIP}"
    ip route add ${VPNGATEWAY} via ${MYGATEWAY} dev ${nic}
    ip route list
}

function remove_routes
{
    MYIP=$(ip addr list ${nic} | grep -w inet | awk '{print $2}' | awk -F / '{print $1}')
    log "Removing route to ${VPNGATEWAY} via ${MYIP}"
    log "ip route del ${VPNGATEWAY} via ${MYGATEWAY} dev ${nic} source ${MYIP}"
    ip route del ${VPNGATEWAY} via ${MYGATEWAY} dev ${nic}
    ip route list
}

# check if openconnect is making this call
if [ "${TUNDEV}" == "${tun_ifac}" ]; then
    # if so, then if this "connect" then we need to bring up the interface and setup routes
    if [ "${reason}" == "connect" ]; then
	log "Setting IP addr on interface [${tun_ifac}] to ${INTERNAL_IP4_ADDRESS}/${INTERNAL_IP4_NETMASKLEN}"
	ip addr add ${INTERNAL_IP4_ADDRESS}/${INTERNAL_IP4_NETMASKLEN} dev ${tun_ifac}
	ip link set dev ${tun_ifac} up
	log "Calling add routes. reason=${reason}";
	add_routes
	add_dns
	exit 0
    fi

    if [ "${reason}" == "disconnect" ]; then
	log "Calling remove routes. reason=${reason}";
	remove_routes
	remove_dns
	exit 0
    fi
    
    log "Exiting due to unknown reason. reason=${reason}";
    exit 0
fi

# check if VPN has already been created
ip link show dev ${tun_ifac} >/dev/null 2>&1 && echo "VPN is already running, attach with tmux attach -tvpn" && exit 2

# If there is an argument passed in then this is most likely in a tmux session/window
if [ $1 ]; then
    if [ $1 == "start" ]; then
	log "Being called to start up"
	vpn_connect
    else
	log "Got called with unknown argument: [${1}]"
	exit 2
    fi
else
    # check to see if there is a tmux session named vpn already
    tmux list-sessions 2>&1 | grep vpn > /dev/null 
    if [ $? -ne 0 ]; then
	log "Starting up a new tmux session"
	tmux new-session -tvpn \; detach
    else
	log "Found an existing tmux session"
    fi

    # check to see if there is a tmux window with a name of openconnect
    tmux list-windows -tvpn 2>&1 | grep ${WINDOWNAME} > /dev/null
    if [ $? -ne 0 ]; then
	log "Starting up a new window in the tmux session"
	tmux new-window -tvpn -n${WINDOWNAME} "${0} start"
    else
	log "Found an existing tmux session with a window named openconnect"
	log "Attaching to the existing session"
	tmux select-window -t vpn:${WINDOWNAME} \; a
    fi
fi
